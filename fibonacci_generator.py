# -*- coding: utf-8 -*-
"""Fibonacci_Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oCpNX_TIQsyxUJi13TldiyYMFY4Wllh5
"""

import time
from functools import lru_cache

# Memoized Fibonacci function using LRU cache for optimization
@lru_cache(None)
def fibonacci_memoized(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci_memoized(n - 1) + fibonacci_memoized(n - 2)

# Generator for Fibonacci sequence
def fibonacci_generator(n, start1=0, start2=1, memoized=False):
    if memoized:
        for i in range(n):
            yield fibonacci_memoized(i)
    else:
        x, y = start1, start2
        for _ in range(n):
            yield x
            x, y = y, x + y

# Function to generate Fibonacci numbers and measure time
def generate_fibonacci(n, start1=0, start2=1, memoized=False, return_as_list=False):
    print(f"Generating {n} Fibonacci numbers...")
    start_time = time.time()

    # Use the generator
    fib_gen = fibonacci_generator(n, start1, start2, memoized)

    # Convert to list if requested
    if return_as_list:
        fibonacci_numbers = list(fib_gen)
    else:
        fibonacci_numbers = fib_gen

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Time taken: {elapsed_time:.6f} seconds")

    return fibonacci_numbers

# Accept input from the user
n = int(input("Input the number of Fibonacci numbers you want to generate: "))
memoized = input("Do you want to use memoization? (yes/no): ").strip().lower() == 'yes'
return_as_list = input("Do you want to return the sequence as a list? (yes/no): ").strip().lower() == 'yes'

# Generate and print the Fibonacci numbers
fibonacci_numbers = generate_fibonacci(n, memoized=memoized, return_as_list=return_as_list)

if return_as_list:
    print("Fibonacci sequence:", fibonacci_numbers)
else:
    print("Fibonacci sequence:")
    for num in fibonacci_numbers:
        print(num)